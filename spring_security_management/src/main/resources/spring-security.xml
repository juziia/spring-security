<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans.xsd
			    http://www.springframework.org/schema/context
			    http://www.springframework.org/schema/context/spring-context.xsd
			    http://www.springframework.org/schema/aop
			    http://www.springframework.org/schema/aop/spring-aop.xsd
			    http://www.springframework.org/schema/tx
			    http://www.springframework.org/schema/tx/spring-tx.xsd
			    http://www.springframework.org/schema/mvc
			    http://www.springframework.org/schema/mvc/spring-mvc.xsd
                http://www.springframework.org/schema/security
			    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 放行资源 对这些路径下的请求不进行认证-->
    <security:http pattern="/css/**" security="none" />
    <security:http pattern="/img/**" security="none" />
    <security:http pattern="/plugins/**" security="none" />
    <security:http pattern="/failer.jsp" security="none" />



    <!--
           auto-config:  启用自动配置
           use-expression:  使用SpringEl表达式
    -->
    <security:http auto-config="true" use-expressions="true">

        <!--
            <security:remember-me>:  开启remember-me功能
             token-validity-seconds:  token存活时间, 时间过后remember-me功能失效

             在提交的用户登陆表单中, 必须要有 remember-me的请求参数, 参数值可以为 "1", "true", "on", "yes"

             默认情况下: remember-me功能是使用cookie以及session保存在内存中实现的
                        我们可以使用在数据库中存储token的信息 当然首先要创建一张表,用于存储token信息

         -->
        <security:remember-me token-validity-seconds="60"
                              data-source-ref="dataSource"
                              remember-me-parameter="remember-me"

        />

        <!-- 采用匿名身份进行认证: 允许访问该路径, 但是接下来的filter还是要执行 -->
        <security:intercept-url pattern="/login.jsp" access="permitAll()" />

        <!-- 对 /** 路径下的请求进行拦截 允许ROLE_USER 角色进行访问-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>


        <!-- 关闭csrf -->
        <security:csrf disabled="true"/>

        <!--
            login-page:  登录页面
            login-precessing-url:  登录请求url
            default-target-url: 认证成功后跳转的页面
            authentication-failure-url: 认证失败后跳转的url

         -->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"

                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"/>

        <security:logout logout-url="/logout" logout-success-url="/login.jsp"/>



    </security:http>


    <security:authentication-manager>
        <!-- user-service-ref 处理用户认证的业务逻辑类 -->
        <security:authentication-provider user-service-ref="userServiceImpl">
            <!-- 设置加密解密用的bean -->
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>

    </security:authentication-manager>




</beans>